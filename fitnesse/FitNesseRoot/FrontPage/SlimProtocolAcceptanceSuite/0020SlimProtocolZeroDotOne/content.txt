!1 Slim protocol v0.1 additions
!2 Instructions
!3 Import
No change.

!3 Make
 * Library Instances: If a make instruction creates an object with an instance name that begins with library then that instance is pushed on the stack of library objects. These objects endure for the entire duration of the SlimServer execution.

!3 Call
 * System Under Test: Each fixture may have a way to declare a particular object to be the System Under Test. In java this is done with the @SystemUnderTest attribute. In RubySlim the object is accessed using the sut method. In .NET, the fixture implements the DomainAdapter interface. Whatever mechanism is used, if a the method specified by a Call or CallAndAssign is not found on the specified instance, then if there is a System Under Test object specified, and the method exists on that object, then it will be called.
 * Library Instances: If a method specified by a Call or CallAndAssign is not found on either the specified instance, or on the System Under Test then the stack of library objects is searched, starting at the top (latest). If the method is found, it is called.

!3 Call and assign
No change.

!2 Symbols
No change.

!2 Type Conversions
Hashes: Optional If one of the method arguments int a Make, Call, or CallAndAssign matches the "hash" format, then it should be converted into a dictionary, or a hash, or some convenient form for the fixture authors. In Java they are converted into Maps. In Ruby they are converted into Hashes. Other languages may use other structures. The "hash" format is the format produced by the Hash Widget[?], and is simply the HTML for a table with two columns and n rows. <table><tr><td>name</td><td>value</td></tr>...</table>.



!contents -R2 -g -p -f -h
